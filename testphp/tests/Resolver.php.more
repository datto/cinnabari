

// TODO: test identity(null_or_boolean)

// TODO: test object
/*
$input = array(Parser::TYPE_OBJECT, array(
	'person' => array(Parser::TYPE_PROPERTY, array('person')),
	'age' => array(Parser::TYPE_PROPERTY, array('person', 'age'))
));
*/

exit;

class Types
{
	const TYPE_NULL = 1;
	const TYPE_BOOLEAN = 2;
	const TYPE_INTEGER = 3;
	const TYPE_FLOAT = 4;
	const TYPE_STRING = 5;
	const TYPE_OBJECT = 6; // array(Types::TYPE_OBJECT, 'Person')
	const TYPE_ARRAY = 7; // array(Types::TYPE_ARRAY, $type)
	const TYPE_OR = 8; // array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_INTEGER)
}


class ResolverTest extends PHPUnit_Framework_TestCase
{
	public function testTrue()
	{
		$input = array(Parser::TYPE_FUNCTION, 'true', array());

		$output = array(Parser::TYPE_FUNCTION, 'true', array(), Types::TYPE_BOOLEAN);

		$this->verify($input, $output);
	}

	public function testBooleanBoolean()
	{
		$input = array(Parser::TYPE_FUNCTION, 'boolean', array(
			array(Parser::TYPE_PROPERTY, array('boolean'))
		));

		$output = array(Parser::TYPE_FUNCTION, 'boolean', array(
			array(Parser::TYPE_PROPERTY, array('boolean'), Types::TYPE_BOOLEAN)
		), Types::TYPE_BOOLEAN);

		$this->verify($input, $output);
	}

	public function testGetPeopleName()
	{
		$input = array(Parser::TYPE_FUNCTION, 'get', array(
			array(Parser::TYPE_PROPERTY, array('people')),
			array(Parser::TYPE_PROPERTY, array('name'))
		));

		$output = array(Parser::TYPE_FUNCTION, 'get', array(
			array(Parser::TYPE_PROPERTY, array('people'), array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, 'Person'))),
			array(Parser::TYPE_PROPERTY, array('name'), Types::TYPE_STRING)
		), array(Types::TYPE_ARRAY, Types::TYPE_STRING));

		$this->verify($input, $output);
	}

	public function testGetFilterPeopleIdName()
	{
		$input = array(Parser::TYPE_FUNCTION, 'get', array(
			array(Parser::TYPE_FUNCTION, 'filter', array(
				array(Parser::TYPE_PROPERTY, array('people')),
				array(Parser::TYPE_FUNCTION, 'equal', array(
					array(Parser::TYPE_PROPERTY, array('id')),
					array(Parser::TYPE_PARAMETER, 'id')
				))
			)),
			array(Parser::TYPE_PROPERTY, array('name'))
		));

		$output = array(Parser::TYPE_FUNCTION, 'get', array(
			array(Parser::TYPE_FUNCTION, 'filter', array(
				array(Parser::TYPE_PROPERTY, array('people'), array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, 'Person'))),
				array(Parser::TYPE_FUNCTION, 'equal', array(
					array(Parser::TYPE_PROPERTY, array('id'), Types::TYPE_INTEGER),
					array(Parser::TYPE_PARAMETER, 'id', array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_INTEGER, Types::TYPE_FLOAT))
				), array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_BOOLEAN))
			), array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, 'Person'))),
			array(Parser::TYPE_PROPERTY, array('name'), Types::TYPE_STRING)
		), array(Types::TYPE_ARRAY, Types::TYPE_STRING));

		$this->verify($input, $output);
	}

	/*
	public function testUnsatisfiableRequest()
	{
		$input = array(Parser::TYPE_FUNCTION, 'get', array(
			array(Parser::TYPE_PROPERTY, array('person')),
			array(Parser::TYPE_PROPERTY, array('person'))
		));

		$exception = self::getUnsatisfiableRequestException($input);

		$this->verifyException($input, $exception);
	}
	*/



	private static function getResolver()
	{
		$functions = array(
			'true' => array(
				array(Types::TYPE_BOOLEAN)
			),
			'boolean' => array(
				array(Types::TYPE_BOOLEAN, Types::TYPE_BOOLEAN)
			),
			'null_boolean' => array(
				array(Types::TYPE_NULL, Types::TYPE_NULL),
				array(Types::TYPE_BOOLEAN, Types::TYPE_BOOLEAN)
			),
			'merge' => array(
				array('$x', '$x', '$x')
			),
			'get' => array(
				array(
					array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, '$x')),
					'$y',
					array(Types::TYPE_ARRAY, '$y')
				)
			),
			'filter' => array(
				array(
					array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, '$x')),
					Types::TYPE_NULL,
					array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, '$x'))
				),
				array(
					array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, '$x')),
					Types::TYPE_BOOLEAN,
					array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, '$x'))
				)
			),
			'equal' => array(
				array(
					Types::TYPE_NULL,
					Types::TYPE_NULL,
					Types::TYPE_NULL
				),
				array(
					Types::TYPE_NULL,
					Types::TYPE_INTEGER,
					Types::TYPE_NULL
				),
				array(
					Types::TYPE_NULL,
					Types::TYPE_FLOAT,
					Types::TYPE_NULL
				),
				array(
					Types::TYPE_INTEGER,
					Types::TYPE_NULL,
					Types::TYPE_NULL
				),
				array(
					Types::TYPE_INTEGER,
					Types::TYPE_INTEGER,
					Types::TYPE_BOOLEAN
				),
				array(
					Types::TYPE_INTEGER,
					Types::TYPE_FLOAT,
					Types::TYPE_BOOLEAN
				),
				array(
					Types::TYPE_FLOAT,
					Types::TYPE_INTEGER,
					Types::TYPE_BOOLEAN
				),
				array(
					Types::TYPE_FLOAT,
					Types::TYPE_NULL,
					Types::TYPE_NULL
				),
				array(
					Types::TYPE_FLOAT,
					Types::TYPE_FLOAT,
					Types::TYPE_BOOLEAN
				),
				array(
					Types::TYPE_NULL,
					Types::TYPE_STRING,
					Types::TYPE_NULL
				),
				array(
					Types::TYPE_STRING,
					Types::TYPE_NULL,
					Types::TYPE_NULL
				),
				array(
					Types::TYPE_STRING,
					Types::TYPE_STRING,
					Types::TYPE_BOOLEAN
				)
			)
		);

		$properties = array(
			'Database' => array(
				'null' => Types::TYPE_NULL,
				'boolean' => Types::TYPE_BOOLEAN,
				'integer' => Types::TYPE_INTEGER,
				'float' => Types::TYPE_FLOAT,
				'string' => Types::TYPE_STRING,
				'nullBoolean' => array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_BOOLEAN),
				'nullInteger' => array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_INTEGER),
				'nullFloat' => array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_FLOAT),
				'nullString' => array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_STRING),
				'person' => array(Types::TYPE_OBJECT, 'Person'),
				'people' => array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, 'Person'))
			),
			'Person' => array(
				'id' => Types::TYPE_INTEGER,
				'age' => Types::TYPE_INTEGER,
				'name' => Types::TYPE_STRING
			)
		);

		return new Resolver(
			new Functions($functions),
			new Properties($properties)
		);
	}
