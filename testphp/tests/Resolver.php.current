<?php

require TESTPHP_TESTS_DIRECTORY . '/autoload.php';

use Datto\Cinnabari\Exception;
use Datto\Cinnabari\Language\Types;
use Datto\Cinnabari\Parser\Tokens\ParameterToken as ParserParameterToken;
use Datto\Cinnabari\Parser\Tokens\PropertyToken as ParserPropertyToken;
use Datto\Cinnabari\Language\Functions; // Mock
use Datto\Cinnabari\Language\Properties; // Mock
use Datto\Cinnabari\Resolver;
use Datto\Cinnabari\Resolver\Request;
use Datto\Cinnabari\Resolver\Tokens\PropertyToken as ResolverPropertyToken;

$functions = new Functions();
$properties = new Properties(array());


// Test
$resolver = new Resolver($functions, $properties);
$output = $resolver->resolve($input);


// Input
$input = new ParserParameterToken('c');

// Output
throw Exception::unresolvableTypeConstraints($input);


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return Types::TYPE_NULL;
$output = new Request(array(
	new ResolverPropertyToken(array('x'), Types::TYPE_NULL)
));


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return Types::TYPE_BOOLEAN;
$output = new Request(array(
	new ResolverPropertyToken(array('x'), Types::TYPE_BOOLEAN)
));


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return Types::TYPE_INTEGER;
$output = new Request(array(
	new ResolverPropertyToken(array('x'), Types::TYPE_INTEGER)
));


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return Types::TYPE_FLOAT;
$output = new Request(array(
	new ResolverPropertyToken(array('x'), Types::TYPE_FLOAT)
));


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return Types::TYPE_STRING;
$output = new Request(array(
	new ResolverPropertyToken(array('x'), Types::TYPE_STRING)
));


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return array(Types::TYPE_OBJECT, 'Person');
$output = new Request(array(
	new ResolverPropertyToken(array('x'), array(Types::TYPE_OBJECT, 'Person'))
));


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return array(Types::TYPE_ARRAY, Types::TYPE_INTEGER);
$output = new Request(array(
	new ResolverPropertyToken(array('x'), array(Types::TYPE_ARRAY, Types::TYPE_INTEGER))
));


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, 'Person'));
$output = new Request(array(
	new ResolverPropertyToken(array('x'), array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, 'Person')))
));


// Input
$input = new ParserPropertyToken(array('x'));

// Output
$properties->getType('Database', 'x'); // return array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_BOOLEAN);
$output = new Request(array(
	new ResolverPropertyToken(array('x'), array(Types::TYPE_OR, Types::TYPE_NULL, Types::TYPE_BOOLEAN))
));


// Input
$input = new ParserPropertyToken(array('unknown'));

// Output
$properties->getType('Database', 'unknown'); // throw Exception::unknownProperty('Database', 'unknown');


// Input
$input = new ParserPropertyToken(array('person', 'age'));

// Output
$properties->getType('Database', 'person'); // return array(Types::TYPE_OBJECT, 'Person');
$properties->getType('Person', 'age'); // return Types::TYPE_INTEGER;
$output = new Request(array(
	new ResolverPropertyToken(array('person', 'age'), Types::TYPE_INTEGER)
));


// Input
$input = new ParserPropertyToken(array('people', 'age'));

// Output
$properties->getType('Database', 'people'); // return array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, 'Person'));
throw Exception::invalidPropertyAccess(array(Types::TYPE_ARRAY, array(Types::TYPE_OBJECT, 'Person')), 'age');
